AI-Powered Healthcare Chatbot Using GPT-2
Abstract:
This project focuses on developing an AI-based chatbot to assist users with healthcare-related
queries, particularly medication-related questions. Leveraging the GPT-2 model from
HuggingFace, fine-tuned on the MedQuad dataset, the chatbot provides reliable guidance by
generating precise, context-aware responses. Additionally, the system integrates appointment
booking and medication reminder scheduling, enhancing its utility in daily healthcare
management. With a user-friendly API and robust backend, this project bridges the gap between
AI and healthcare needs, providing a scalable solution. This report provides an in-depth
exploration of the project’s goals, design, implementation, challenges, and future directions.
1. Introduction
1.1 Primary Objective
The primary objective of this project is to create an AI-powered chatbot capable of answering
user queries related to medications. This involves leveraging state-of-the-art language models
like GPT-2 to provide detailed and accurate responses. The fine-tuned GPT-2 model on the
MedQuad dataset enables domain-specific understanding and ensures that the chatbot aligns with
real-world medical knowledge.
1.2 Secondary Objectives
1. 2. Facilitate booking doctor appointments directly through the chatbot interface.
Provide users with medication reminders to improve adherence and health outcomes.
1.3 Scope
This project targets users seeking quick, reliable, and convenient healthcare guidance. It caters to
individuals who require immediate answers to medication-related questions, need assistance with
booking medical appointments, or rely on timely medication reminders for adherence. By
integrating advanced natural language processing (NLP) capabilities and user-friendly API
endpoints, the chatbot demonstrates practical applications of AI in healthcare and enhances
accessibility to essential health services.
2. Technology Stack:
2.1 AI Model: GPT-2
• Source: HuggingFace Transformers library.
• Architecture: GPT-2 (Generative Pretrained Transformer-2) is based on the transformer
architecture. It employs self-attention mechanisms and multi-layer feed-forward networks
to process text data. GPT-2 uses positional encoding to maintain sequence order and layer
normalization for stable gradient updates.
• Fine-Tuning: Trained on the MedQuad dataset for healthcare domain specialization.
This involved adapting the pre-trained GPT-2 model to the nuances of medical language
by fine-tuning it with domain-specific question-answer pairs.
• Capabilities:
o Handles long-form responses with contextual understanding.
o Generates coherent and contextually relevant answers to healthcare-related
queries.
o Supports token-level adjustments for controlling response length and specificity.
• Key Features:
o Pre-trained on a large corpus of general data, making it versatile in understanding
context.
o Adaptable to domain-specific needs through additional training.
o Employs language modeling to predict the next word in a sequence, ensuring
fluency in generated responses.
2.2 Dataset: MedQuad
• Source: GitHub.
• Description: A dataset containing annotated medical question-answer pairs.
• Purpose: Enhances GPT-2’s understanding of healthcare-related topics.
2.3 Backend Framework: Flask
• Provides a lightweight and RESTful API interface for chatbot functionalities.
2.4 Database
• SQLite: Stores user appointments and reminders.
• Fine-tuned GPT-2 Model Storage: Stores trained model files locally.
2.5 Scheduler: APScheduler
• Manages medication reminders with precise timing.
2.6 SMS API: Twilio
• Sends SMS reminders to users for scheduled medications.
3. System Architecture
3.1 Components
1. 2. 3. Chatbot Core: GPT-2 fine-tuned on the MedQuad dataset.
Reminder Service: Combines APScheduler with Twilio SMS API.
Appointment Booking: Flask endpoint for managing doctor bookings.
3.2 Data Flow
1. 2. 3. 4. Users interact with the chatbot via API endpoints.
Queries are processed by GPT-2 to generate accurate responses.
Appointments and reminders are stored in SQLite.
Scheduled reminders trigger SMS notifications through Twilio.
4. Implementation
4.1 Training GPT-2 on MedQuad
1. Data Collection:
o Downloaded the MedQuad dataset from GitHub, which contains annotated
medical question-answer pairs across various categories like diseases, treatments,
and symptoms.
o Ensured the dataset was balanced to prevent bias in the model's responses.
2. Data Preprocessing:
o Cleaned the dataset by removing noise, incomplete records, and redundant
information.
o Used HuggingFace's GPT-2 tokenizer to tokenize the text into input-output pairs
compatible with the model.
o Split the dataset into training, validation, and testing sets to evaluate the model
effectively.
3. Fine-Tuning Process:
o Utilized the PyTorch framework with HuggingFace Transformers library.
o Trained the model on a high-performance GPU for optimal learning speed.
o Applied techniques like learning rate scheduling, gradient clipping, and early
stopping to ensure robust model convergence.
4. Model Evaluation:
o Computed BLEU scores to measure the model’s response quality against
reference answers.
o Conducted human evaluation by having medical experts assess the relevance and
accuracy of responses.
4.2 Flask API Endpoints
1. General Information Query Handling:
o Implemented a /general_info endpoint where users send healthcare-related
queries.
o The backend processes the input query, tokenizes it, and generates a response
using the fine-tuned GPT-2 model.
2. Appointment Booking System:
o Added a /book_appointment endpoint to allow users to book appointments with
doctors.
o The system validates user inputs (e.g., name, date, time) and stores the booking
details in an SQLite database.
3. Reminder Scheduling:
o Developed a /set_reminder endpoint where users can set medication reminders.
o Integrated APScheduler to handle the scheduling logic and trigger reminders at
the specified times.
4.3 Integration of Twilio SMS API
1. SMS Delivery Pipeline:
o Configured Twilio’s SMS API to send reminders to users’ registered phone
numbers.
o Ensured that messages follow a standardized template for clarity and
professionalism.
2. Error Handling:
o Implemented robust error handling to catch issues like invalid phone numbers,
unauthorized API access, and message delivery failures.
3. Logging and Monitoring:
o Integrated logging mechanisms to track SMS delivery status using Twilio’s
callback URLs.
o Used APScheduler’s logging features to monitor scheduled jobs and debug timing
issues.
4. Scalability Considerations:
o Designed the SMS pipeline to handle multiple concurrent reminders without
delays.
o Future-proofed the system by planning for integration with additional
communication channels like email and push notifications.
4.1 Training GPT-2 on MedQuad
1. Data Preprocessing:
o Extracted question-answer pairs.
o Tokenized using HuggingFace tokenizer.
2. Fine-Tuning:
o Used PyTorch framework.
o Trained with early stopping and learning rate scheduling.
3. Model Evaluation:
o Metrics: BLEU score and response relevance.
o Achieved significant improvements over baseline GPT-2.
4.2 Flask API Endpoints
• Query Processing:
• @app.route("/general_info", methods=["POST"])
• def general_info():
• query = request.json.get("query", "")
• response = gpt2_model.generate_response(query)
• return jsonify({"response": response})
• Appointment Booking:
• @app.route("/book_appointment", methods=["POST"])
• def book_appointment():
• # Parse user data and store appointment details.
• Reminder Scheduling:
• @app.route("/set_reminder", methods=["POST"])
• def set_reminder():
• # Schedule SMS reminders using Twilio API.
4.3 Integration of Twilio SMS API
• Sends reminders to the user’s registered phone number.
• def send_sms_reminder(name, medication, phone_number):
• client.messages.create(
• body=f"Reminder: {name}, it's time to take your medication:
{medication}",
• from_="your_twilio_phone_number",
• to=phone_number
• )
5. Testing and Evaluation
5.1 Model Evaluation
• BLEU Score: Measures response relevance.
• Human Evaluation: Users rated responses for accuracy and helpfulness.
5.2 API Testing
• Used Postman and cURL to test all API endpoints.
• Verified data storage in SQLite for appointments and reminders.
5.3 Reminder Delivery Testing
• Sent test SMS to verified numbers via Twilio.
• Ensured timely delivery using APScheduler logs.
6. Challenges Faced:
6.1 Dataset Limitations
• Addressed by cleaning and augmenting the MedQuad dataset.
6.2 Twilio Restrictions
• Worked within trial account limitations by verifying phone numbers.
6.3 Response Accuracy
• Improved GPT-2 responses by fine-tuning and hyperparameter tuning.
7. Security Considerations:
7.1 Data Protection
• Used HTTPS for secure API communication.
• Masked sensitive information in logs.
7.2 Credential Management
• Stored Twilio and database credentials in environment variables.
8. Future Enhancements:
8.1 Advanced Chatbot Features
• Support for multilingual queries.
• Integration with voice-based assistants.
8.2 Enhanced Appointment Management
• Add doctor profiles and time-slot availability.
8.3 Reminder Customization
• Recurring reminders for long-term medications.
8.4 Scalability
• Transition to cloud-based databases and containerized deployment.
9. Conclusion:
This AI-powered healthcare chatbot combines the strengths of GPT-2 and practical utility
features like appointment booking and medication reminders. The project demonstrates the
potential of AI in enhancing healthcare accessibility and adherence. Future iterations aim to
refine accuracy, scalability, and usability, ensuring a broader impact.
10. References:
1. GPT-2 Documentation: https://huggingface.co/docs
2. MedQuad Dataset: https://github.com/medquad
3. Flask Framework: https://flask.palletsprojects.com/
4. Twilio SMS API: https://www.twilio.com/docs/sms
5. SQLite Documentation: https://sqlite.org/docs.html
